openapi: 3.0.0
info:
  title: API Documentation
  version: 1.0.0

securitySchemes:
  BasicAuth:
    type: http
    scheme: basic

tags:
  - name: Testing
    description: For API testing
  - name: Drivers
    description: API for managing drivers

paths:
  /api/testing/all-data:
    delete:
      summary: "Clear database: delete all data from all tables/collections"
      tags: [ Testing ]
      responses:
        204:
          description: All data deleted

  /api/drivers:
    get:
      summary: Get a list of all drivers
      tags: [ Drivers ]
      responses:
        200:
          description: List of all drivers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Driver'
    post:
      summary: Add a new driver
      tags: [ Drivers ]
      security:
        - BasicAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DriverInputDto'
      responses:
        201:
          description: The driver was successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Driver'
        400:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'

  /api/drivers/{id}:
    get:
      summary: Get a driver by ID
      tags: [ Drivers ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: The requested driver
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Driver'
        404:
          description: Driver not found
    put:
      summary: Update a driver by ID
      tags: [ Drivers ]
      security:
        - BasicAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DriverInputDto'
      responses:
        204:
          description: Driver updated successfully
        400:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        404:
          description: Driver not found
    delete:
      summary: Delete a driver by ID
      tags: [ Drivers ]
      security:
        - BasicAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        204:
          description: Driver deleted successfully
        404:
          description: Driver not found

  /api/drivers/{id}/status:
    put:
      summary: Update driver status by ID
      tags: [ Drivers ]
      security:
        - BasicAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the driver to update status
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VehicleStatusUpdateDto'
      responses:
        204:
          description: Driver status updated successfully
        400:
          description: Incorrect status value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        404:
          description: Driver not found

components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
  schemas:
    Driver:
      type: object
      required:
        - id
        - name
        - phoneNumber
        - email
        - status
        - vehicleMake
        - vehicleModel
        - vehicleYear
        - vehicleLicensePlate
        - vehicleFeatures
        - createdAt
      properties:
        id:
          type: integer
        name:
          type: string
        phoneNumber:
          type: string
        email:
          type: string
        status:
          type: string
        vehicleMake:
          type: string
        vehicleModel:
          type: string
        vehicleYear:
          type: integer
          example: 2025
        vehicleLicensePlate:
          type: string
        vehicleDescription:
          type: string
          nullable: true
        vehicleFeatures:
          type: array
          items:
            type: string
            enum: [ WiFi, ChildSeat, PetFriendly ]
        createdAt:
          type: string
          format: date-time
    DriverInputDto:
      type: object
      required:
        - name
        - phoneNumber
        - email
        - vehicleMake
        - vehicleModel
        - vehicleYear
        - vehicleLicensePlate
        - vehicleFeatures
      properties:
        name:
          type: string
        phoneNumber:
          type: string
        email:
          type: string
        vehicleMake:
          type: string
        vehicleModel:
          type: string
        vehicleYear:
          type: integer
          example: 2025
        vehicleLicensePlate:
          type: string
        vehicleDescription:
          type: string
          nullable: true
        vehicleFeatures:
          type: array
          items:
            type: string
            enum: [ WiFi, ChildSeat, PetFriendly ]
    VehicleStatusUpdateDto:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum: [ awaiting-order, on-order, on-pause ]
    ValidationError:
      type: object
      properties:
        field:
          type: string
          example: "name"
        message:
          type: string
          example: "Invalid name"
    ValidationErrorResponse:
      type: object
      properties:
        errorMessages:
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
